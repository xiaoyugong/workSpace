package wuzhouc;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.s3.MigrationTool;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.KeyValue;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.HConnection;
import org.apache.hadoop.hbase.client.HConnectionManager;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.client.coprocessor.Batch;
import org.apache.hadoop.hbase.ipc.BlockingRpcCallback;
import org.apache.hadoop.hbase.ipc.ServerRpcController;
import org.apache.hadoop.hbase.util.Bytes;
import org.wuzhou.hanyun.corprocessor.ServerCountWuZhou;
import org.wuzhou.hanyun.corprocessor.ServerCountWuZhou.Result;
import org.wuzhou.hanyun.corprocessor.ServerCountWuZhou.RowCountResponse;
import org.wuzhou.hanyun.corprocessor.ServerCountWuZhou.WuZhouService;

import com.google.protobuf.ServiceException;

public class KunMingClient {

	public static void main(String[] args) {
		getrow("chepai");
	}

	public static class ResponseInfo {
		public Object ob;
		public boolean bool;

	}

	public static void getrow(String tablename) {

		System.out.println("ewwe");
		long date1 = System.currentTimeMillis();
		Configuration conf = HBaseConfiguration.create();

		// HConnection conn=HConnectionManager.createConnection(conf);
		// conf.set("hbase.zookeeper.quorum", "172.18.30.21");
		// conf.set("hbase.zookeeper.property.clientPort", "2181");

		HTable table;
		try {
			table = new HTable(conf, tablename);

			List<Result> list = new ArrayList<>();

			ServerCountWuZhou.RowCountRequest request = ServerCountWuZhou.RowCountRequest.newBuilder().setMUST(true)
					// .setChepai("川A14137").setKakou("卡口1").build();
					// .setTimestart("1469515598556").setTimeend("1469515598559").build();
					// .setKakou("卡口1").build();
				//	 .setChexing("dache").build();
				//	 .setWeizhang("违章cao").build();
					 .setChepai("川A14138").build();
				//	.setChepai("川A14134").setKakou("卡口3").build();
			        // .setChepai("").build();

			System.out.println("ewew");
			Batch.Callback<RowCountResponse> callback = new Batch.Callback<RowCountResponse>() {
				@Override
				public void update(byte[] arg0, byte[] arg1, RowCountResponse resp) {
					// TODO Auto-generated method stub
					List<Result> list2 = resp.getResultList();
					for (Result ha : list2) {
						System.out.println(ha.getRowkey());

					}
				}
			};
			System.out.println("ewwe");
			Map<byte[], ResponseInfo> map = table.coprocessorService(ServerCountWuZhou.WuZhouService.class, null, null,
					new Batch.Call<ServerCountWuZhou.WuZhouService, ResponseInfo>() {

						@Override
						public ResponseInfo call(WuZhouService counter) throws IOException {
							// TODO Auto-generated method stub
							System.out.println("ewwe");
							ServerRpcController con = new ServerRpcController();
							BlockingRpcCallback<RowCountResponse> rpccall = new BlockingRpcCallback<RowCountResponse>();
							System.out.println("ewew");
							counter.getChePai(con, request, rpccall);
							System.out.println("ewew");
							RowCountResponse resp = rpccall.get();
							if (resp.getOut() == false) {
								System.out.println("没查到相关数据 ! ! ! ");
								return null;
							}

							List<Result> list2 = resp.getResultList();
							for (Result ha : list2) {
								System.out.println(ha.getRowkey());

							}
							System.out.println("jiueshu le ");

							ResponseInfo ri = new ResponseInfo();
							list.addAll(resp.getResultList());

							return ri;
						}
					});

			long date2 = System.currentTimeMillis();
			System.out.println(date2 - date1);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Throwable e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}